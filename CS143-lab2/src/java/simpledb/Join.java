package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate m_p;
    private DbIterator m_child1;
    private DbIterator m_child2;
    private TupleDesc m_td1, m_td2, td;
    private ArrayList<Tuple> childTups = new ArrayList<Tuple>();
    private Iterator<Tuple> it;    
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        m_p = p;
	m_child1 = child1;
	m_child2 = child2;
	m_td1 = child1.getTupleDesc();
	m_td2 = child2.getTupleDesc();
	td = TupleDesc.merge(m_td1, m_td2);
    }

    public JoinPredicate getJoinPredicate() {
        return m_p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
	return m_td1.getFieldName(m_p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return m_td2.getFieldName(m_p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
	td=TupleDesc.merge(m_td1,m_td2);
	return td;
    }
    public Tuple TupleMerge(Tuple t1, Tuple t2) {
        Tuple merged = new Tuple(td);
        int i;
        for (i = 0; i < m_td1.numFields(); i++)
                merged.setField(i, t1.getField(i));
        for (int j = 0; j < m_td2.numFields(); j++)
                merged.setField(i+j, t2.getField(j));
        return merged;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
	m_child1.open();
	m_child2.open();

	//code to make the childTups.add(temp)
	while(m_child1.hasNext())
	{
		Tuple temp1 = m_child1.next();
		while(m_child2.hasNext())
		{
			Tuple temp2 = m_child2.next();
			if(m_p.filter(temp1,temp2))
				childTups.add(TupleMerge(temp1,temp2));
		}
		m_child2.rewind();
	}
	it = childTups.iterator();
	super.open();
    }

    public void close() {
	m_child1.close();
	m_child2.close();
	it = null;
	super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        m_child1.rewind();
	m_child2.rewind();
	it = childTups.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
	if ( it != null && it.hasNext())
		return it.next();
	return null;
    }

    @Override
    public DbIterator[] getChildren() {
	return new DbIterator[] { this.m_child1, this.m_child2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
	if(this.m_child1 != children[0])
	        this.m_child1 = children[0];
	if(this.m_child2 != children[1])
		this.m_child2 = children[1];
    }
}
